import telebot
import sqlite3
from telebot import types
from threading import Thread
from datetime import datetime

# –°–æ–∑–¥–∞–Ω–∏–µ –±–æ—Ç–∞ –∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ API
bot = telebot.TeleBot('6793241518:AAHpaOlIMXZUfSu2AO8dc5n7W5gIPSXwMGE')

# –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
conn = sqlite3.connect('comments.db')
cursor = conn.cursor()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü—ã "comments"
cursor.execute('''
    CREATE TABLE IF NOT EXISTS comments (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        username TEXT NOT NULL,
        comment TEXT NOT NULL
    )
''')

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π –∏ –∑–∞–∫—Ä—ã—Ç–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
conn.commit()
cursor.close()
conn.close()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@bot.message_handler(commands=['start'])
def start(message):
    bot.reply_to(message, "üìì –ü—Ä–∏–≤–µ—Ç! –ü—Ä–∏—Å—ã–ª–∞–π—Ç–µ –º–Ω–µ —é–∑–µ—Ä–Ω–µ–π–º—ã –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏. –ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å - @equinoxcoder")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π —Å —é–∑–µ—Ä–Ω–µ–π–º–∞–º–∏ –∏ –∫–Ω–æ–ø–∫–æ–π "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è"
@bot.message_handler(func=lambda message: message.text.startswith('@'))
def get_user_info(message):
    username = message.text[1:]

    # –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
    user_id = message.from_user.id
    last_visit = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    comments_count = get_comments_count(username)

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –∏ –∫–Ω–æ–ø–∫–∞–º–∏
    user_info = f"üìì –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —é–∑–µ—Ä–µ @{username}:\n"
    user_info += f"‚öôÔ∏è ID: {user_id}\n"
    user_info += f"‚úâÔ∏è –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤: {comments_count}\n"

    markup = types.InlineKeyboardMarkup()
    comments_button = types.InlineKeyboardButton('–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è', callback_data=f'comments_{username}')
    add_comment_button = types.InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π', callback_data=f'add_{username}')
    markup.row(comments_button)
    markup.row(add_comment_button)
    
    bot.send_message(message.chat.id, user_info, reply_markup=markup, reply_to_message_id=message.message_id)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è" –∏ "–î–æ–±–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π"
@bot.callback_query_handler(func=lambda call: call.data.startswith(('comments_', 'add_')))
def handle_comments_add(call):
    command, username = call.data.split('_')
    
    if command == 'comments':
        # –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        comments = get_user_comments(username)
        if comments:
            for comment in comments:
                bot.send_message(call.message.chat.id, f"–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π : {comment}")
        else:
            bot.send_message(call.message.chat.id, "–£ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–µ—Ç –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤.")
    
    if command == 'add':
        # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—ã—Ç–∞–µ—Ç—Å—è –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –¥—Ä—É–≥–æ–º—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        if call.from_user.username != username:
            # –ó–∞–ø—Ä–æ—Å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            bot.send_message(call.message.chat.id, "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π:")
            bot.register_next_step_handler(call.message, save_comment, username)
        else:
            bot.send_message(call.message.chat.id, "–í—ã –Ω–µ –º–æ–∂–µ—Ç–µ –æ—Å—Ç–∞–≤–∏—Ç—å –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —Å–∞–º–æ–º—É —Å–µ–±–µ.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_comment(message, username):
    comment = message.text
    # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    save_user_comment(username, comment)
    bot.send_message(message.chat.id, "–ö–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω.")

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
def get_user_comments(username):
    conn = sqlite3.connect('comments.db')
    cursor = conn.cursor()
    cursor.execute("SELECT comment FROM comments WHERE username = ?", (username,))
    comments = cursor.fetchall()
    cursor.close()
    conn.close()
    return [comment[0] for comment in comments] if comments else []

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–µ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
def get_comments_count(username):
    conn = sqlite3.connect('comments.db')
    cursor = conn.cursor()
    cursor.execute("SELECT count(*) FROM comments WHERE username = ?", (username,))
    count = cursor.fetchone()[0]
    cursor.close()
    conn.close()
    return count

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
def save_user_comment(username, comment):
    conn = sqlite3.connect('comments.db')
    cursor = conn.cursor()
    cursor.execute("INSERT INTO comments (username, comment) VALUES (?, ?)", (username, comment))
    conn.commit()
    cursor.close()
    conn.close()

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
def bot_polling():
    bot.polling(none_stop=True)

# –ó–∞–ø—É—Å–∫ –ø–æ—Ç–æ–∫–∞ –¥–ª—è –±–æ—Ç–∞
bot_thread = Thread(target=bot_polling)
bot_thread.start()